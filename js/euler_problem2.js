/* Each new term in the Fibonacci sequence is generated by adding
the previous two terms. By starting with 1 and 2, the first 10 terms
will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do
not exceed four million, find the sum of the even-valued terms.

--

Ok, so. I over-engineered the last one by going with an array-based
method and then using .reduce to add the values of the array.
Unnecessary, I saw after that most people simply added the numbers
to a variable to get the answer. Obvious, now that I see it.

But in this case I see an array-based solution being one option:

Create an array with 1, and 2.
Sum the last 2 numbers in the array
Add the output to the end of the array
Stop adding at 4,000,000 (while?)
find even values in array, sum them



*/

// create an array with the first 2 numbers of fib. sequence
var fib = [1, 2];
var fibEvenTotal = 0;

function fibProgression() {
  while(fib[fib.length - 1] <= 4000000) {
    fib.push(fib[fib.length - 1] + fib[fib.length - 2])
  }
}

fibProgression();

fib.forEach(function(currentValue, index, array) {
  if (currentValue%2 === 0) {
    fibEvenTotal += currentValue;
  }
});

console.log(fib);
console.log(fibEvenTotal);

// Messing with solution display within index.html
document.getElementById('solutionText2').innerHTML = fibEvenTotal;
